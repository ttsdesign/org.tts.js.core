[
    {
        "$Define": {
            "module": "Global",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ]
        },
        "Object.$Define": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\src\\Object\\Define.js"
        },
        "Object.prototype.$Define": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\src\\Object\\Define.js"
        },
        "file": "V:\\packages\\org.tts.js.core-dev.git\\src\\Object\\Define.js"
    },
    {
        "Array.prototype.$AsObject": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Converts array to an object",
            "references": {
                "as@github": "https://github.com/architectcodes/as"
            },
            "todo": [
                "Update to utilize [key, value] rather than [{key: 'key', value: value}]",
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Delete": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Deletes the specified elements from the array",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Delete": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Deletes the specified elements from the array",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$DeleteAt": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Deletes the specified indexes from the array. Will sort indexes in descending order, then remove.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$DeleteAt": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Deletes the specified indexes from the array. Will sort indexes in descending order, then remove.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Difference": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Returns an array with only the unique values from the first array, by excluding all values from additional arrays using strict equality for comparisons.",
            "references": {
                "arr-diff@github": "https://github.com/jonschlinkert/arr-diff"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Difference": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Returns an array with only the unique values from the first array, by excluding all values from additional arrays using strict equality for comparisons.",
            "references": {
                "arr-diff@github": "https://github.com/jonschlinkert/arr-diff"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Flatten": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "A tiny utility to flatten arrays of arrays (of arrays, etc., recursively, infinitely or to an optional depth) into a single array of non-arrays.",
            "references": {
                "node-flatten@github": "https://github.com/jfhbrook/node-flatten"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$From": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Ceates a new, shallow-copied Array instance from an array-like or iterable object.",
            "references": {
                "array-from@github": "https://github.com/studio-b12/array-from"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Includes": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
            "references": {
                "lodash_arrayincludes@github": "https://www.npmjs.com/package/lodash._arrayincludes"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Includes": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
            "references": {
                "lodash_arrayincludes@github": "https://www.npmjs.com/package/lodash._arrayincludes"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Intersection": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Creates an array of unique values using SameValueZero for equality comparisons.",
            "references": {
                "intersect@github": "https://github.com/juliangruber/intersect"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Intersection": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Creates an array of unique values using SameValueZero for equality comparisons.",
            "references": {
                "intersect@github": "https://github.com/juliangruber/intersect"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$IsArray": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Checks if value is classified as an Array object.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Omit": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Returns an array with the specified values omitted.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Omit": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Returns an array with the specified values omitted.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$OmitAt": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Returns an array with the specified indexes omitted.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$OmitAt": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Returns an array with the specified indexes omitted.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Select": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Creates an array of elements at given indexes.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Select": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Creates an array of elements at given indexes.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Union": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Creates an array of unique values, in order, from all given arrays using SameValueZero for equality comparisons.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Union": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Creates an array of unique values, in order, from all given arrays using SameValueZero for equality comparisons.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Unique": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Creates a duplicate-free version of an array, using SameValueZero for equality comparisons, in which only the first occurrence of each element is kept.  \nIf mutate is truthy, then the array will be mutated and returned.",
            "references": {
                "lodash_uniq": "https://lodash.com/docs/4.17.11#uniq",
                "@github": "https://github.com/lodash/lodash/blob/4.17.11/lodash.js#L8392"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Unique": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Creates a duplicate-free version of an array, using SameValueZero for equality comparisons, in which only the first occurrence of each element is kept.  \nIf mutate is truthy, then the array will be mutated and returned.",
            "references": {
                "lodash_uniq": "https://lodash.com/docs/4.17.11#uniq",
                "@github": "https://github.com/lodash/lodash/blob/4.17.11/lodash.js#L8392"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.$Xor": {
            "module": "Array",
            "type": "function",
            "static": true,
            "description": "Creates a duplicate-free version of an array, using SameValueZero for equality comparisons, in which only the first occurrence of each element is kept.  \nIf mutate is truthy, then the array will be mutated and returned.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$Xor": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Creates a duplicate-free version of an array, using SameValueZero for equality comparisons, in which only the first occurrence of each element is kept.  \nIf mutate is truthy, then the array will be mutated and returned.",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$first": {
            "module": "Array",
            "type": "value",
            "instance": true,
            "description": "Gets the first element of array.",
            "tests": [
                "Test.Equal([1,2,3,4].$first, 1, 'Array.prototype.$first')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "Array.prototype.$last": {
            "module": "Array",
            "type": "function",
            "instance": true,
            "description": "Gets the last element of array. ",
            "tests": [
                "Test.Equal([1,2,3,4].$last, 4, 'Array.prototype.$last')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
        },
        "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Array.js"
    },
    {
        "$And": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$Compose": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$ComposePromised": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$Curry": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$Debounce": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$If": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$Memoize": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "references": {
                "memoize@github": "https://github.com/stagas/memoize"
            },
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$Noop": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$Not": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$Or'": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "$Unless": {
            "module": "Functional",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
        },
        "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Functional.js"
    },
    {
        "$context": {
            "module": "Global",
            "type": "string",
            "static": true,
            "description": "Value indicating js environment such as Browser, NodeJs or Google",
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Global.js"
        },
        "$Defined": {
            "module": "Global",
            "type": "function",
            "static": true,
            "description": "Function that returns true if an object is defined",
            "tests": [
                "Test.Not($Defined(null), '$Defined:1')",
                "Test.Ok($Defined(true), '$Defined:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Global.js"
        },
        "$NotDefined": {
            "module": "Global",
            "type": "function",
            "static": true,
            "description": "Function that returns true if an object is not defined",
            "tests": [
                "Test.Not($NotDefined(true), '$NotDefined:1')",
                "Test.Ok($NotDefined(null), '$NotDefined:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Global.js"
        },
        "Test": {
            "module": "Global",
            "type": "object",
            "static": true,
            "description": "Test object",
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Global.js"
        },
        "log": {
            "module": "Global",
            "type": "function",
            "static": true,
            "description": "Log function mapped to either console.log or Logger.log",
            "tests": [
                "Test.Ok(log==console.log||log==Logger.log, 'log()')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Global.js"
        },
        "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Global.js"
    },
    {
        "Object.$Clone": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Clone": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$Define": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Define": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$Each": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Each": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$Extend": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Extend": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$Has": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Has": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$Includes": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Includes": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$IsEqual": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$IsEqual": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$Keys": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Keys": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$Type": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Type": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.$Values": {
            "module": "Object",
            "type": "function",
            "static": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "Object.prototype.$Values": {
            "module": "Object",
            "type": "function",
            "instance": true,
            "description": "",
            "todo": [
                "Add tests",
                "airbnb styling"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
        },
        "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\Object.js"
    },
    {
        "String.$AsAscii": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Convert string from Base64 to Ascii",
            "tests": [
                "Test.Equal(String.$AsAscii('dGVzdA=='), 'test', 'String.$AsAscii:1')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$AsAscii": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Convert string from Base64 to Ascii",
            "tests": [
                "Test.Equal('dGVzdA=='.$AsAscii(), 'test', 'String.$AsAscii:1')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$AsBase64": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Convert string from Ascii to Base64",
            "tests": [
                "Test.Equal(String.$AsBase64('test'), 'dGVzdA==', 'String.$AsBase64:1')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$AsBase64": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Convert string from Ascii to Base64",
            "tests": [
                "Test.Equal(String.$AsBase64('test'), 'dGVzdA==', 'String.$AsBase64:1')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$AsUrlMatch": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Converts text string into a url match pattern, useful with chrome extensions",
            "tests": [
                "Test.Ok('http://ttscloud.co/'.match(String.$AsUrlMatch('*://*.ttscloud.co/*')) != null, 'String.$AsUrlMatch')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$AsUrlMatch": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Converts text string into a url match pattern, useful with chrome extensions",
            "tests": [
                "Test.Ok('http://ttscloud.co/'.match('*://*.ttscloud.co/*'.$AsUrlMatch()) != null, 'String.prototype.$AsUrlMatch')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$CamelCase": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Converts a string to Camel Case format",
            "tests": [
                "Test.Equal(String.$CamelCase('this is a test'), 'thisIsATest', 'String.$CamelCase:1')",
                "Test.Equal(String.$CamelCase('this is a test', true), 'ThisIsATest', 'String.$CamelCase:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$CamelCase": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Converts a string to Camel Case format",
            "tests": [
                "Test.Equal('this is a test'.$CamelCase(), 'thisIsATest', 'String.prototype.$CamelCase:1')",
                "Test.Equal('this is a test'.$CamelCase(true), 'ThisIsATest', 'String.prototype.$CamelCase:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$Capitalize": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Capitalize the first letter of a string, or all words in a string",
            "tests": [
                "Test.Equal(String.$Capitalize('THIS IS A TEST'), 'This is a test', 'String.$Capitalize:1')",
                "Test.Equal(String.$Capitalize('THIS IS A TEST', true), 'This Is A Test', 'String.$Capitalize:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$Capitalize": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Capitalize the first letter of a string, or all words in a string",
            "tests": [
                "Test.Equal('THIS IS A TEST'.$Capitalize(), 'This is a test', 'String.prototype.$Capitalize:1')",
                "Test.Equal('THIS IS A TEST'.$Capitalize(true), 'This Is A Test', 'String.prototype.$Capitalize:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$EndsWith": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Checks if string ends with the given target string",
            "tests": [
                "Test.Ok(String.$EndsWith('test case string', 'ing'), 'String.$EndsWith:1')",
                "Test.Ok(String.$EndsWith('test case string', 'ase', 9), 'String.$EndsWith:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$EndsWith": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Checks if string ends with the given target string",
            "tests": [
                "Test.Ok('test case string'.$EndsWith('ing'), 'String.protoype.$EndsWith:1')",
                "Test.Ok('test case string'.$EndsWith('ase', 9), 'String.prototype.$EndsWith:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$Hash": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Generates a MD5 or SHA-1 hash string",
            "tests": [
                "Test.Equal(String.$Hash('test string'), '6f8db599de986fab7a21625b7916589c', 'String.$Hash:1')",
                "Test.Equal(String.$Hash('test string', 'sha1'), '661295c9cbf9d6b2f6428414504a8deed3020641', 'String.$Hash:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$Hash": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Generates a MD5 or SHA-1 hash string",
            "tests": [
                "Test.Equal('test string'.$Hash(), '6f8db599de986fab7a21625b7916589c', 'String.prototype.$Hash:1')",
                "Test.Equal('test string'.$Hash('sha1'), '661295c9cbf9d6b2f6428414504a8deed3020641', 'String.prototype.$Hash:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$IsBase64": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Tests whether a string is in Base64 format",
            "tests": [
                "Test.Ok(String.$IsBase64('dGVzdCBzdHJpbmc='), 'String.$IsBase64:1')",
                "Test.Not(String.$IsBase64('test string'), 'String.$IsBase64:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$IsBase64": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Tests whether a string is in Base64 format",
            "tests": [
                "Test.Ok('dGVzdCBzdHJpbmc='.$IsBase64(), 'String.prototype.$IsBase64:1')",
                "Test.Not('test string'.$IsBase64(), 'String.prototype.$IsBase64:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$IsEmpty": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Checks whether a string is emty (''), null or undefined",
            "tests": [
                "Test.Ok(String.$IsEmpty(''), 'String.$IsEmpty:1')",
                "Test.Not(String.$IsEmpty('test'), 'String.$IsEmpty:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$IsEmpty": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Checks whether a string is emty (''), null or undefined",
            "tests": [
                "Test.Ok(''.$IsEmpty(), 'String.protoype.$IsEmpty:1')",
                "Test.Not('test'.$IsEmpty(), 'String.protoype.$IsEmpty:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$Match": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Matches a string against a pattern and returns true or false",
            "tests": [
                "Test.Ok(String.$Match('test string', 'str'), 'String.$Match:1')",
                "Test.Not(String.$Match('test string', 'xxx'), 'String.$Match:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$Match": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Matches a string against a pattern and returns true or false",
            "tests": [
                "Test.Ok('test string'.$Match('str'), 'String.protoype.$Match:1')",
                "Test.Not('test string'.$Match('xxx'), 'String.protoype.$Match:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$Pad": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "",
            "tests": [
                "Test.Equal(String.$Pad('test', 10, 'x'), 'xxxxxxtest', 'String.$Pad:1')",
                "Test.Equal(String.$Pad('test', 10, 'x', true), 'testxxxxxx', 'String.$Pad:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$Pad": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "",
            "tests": [
                "Test.Equal('test'.$Pad(10, 'x'), 'xxxxxxtest', 'String.prototype.$Pad:1')",
                "Test.Equal('test'.$Pad(10, 'x', true), 'testxxxxxx', 'String.prototype.$Pad:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$Repeat": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Returns a new string consisting of a string repeated (n) times",
            "tests": [
                "Test.Equal(String.$Repeat('test', 3), 'testtesttest', 'String.$Repeat')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$Repeat": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Returns a new string consisting of a string repeated (n) times",
            "tests": [
                "Test.Equal('test'.$Repeat(3), 'testtesttest', 'String.prototype.$Repeat')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.$StartsWith": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "static": true,
            "description": "Checks if string starts with the given target string",
            "tests": [
                "Test.Ok(String.$StartsWith('test string', 'tes'), 'String.$StartsWith:1')",
                "Test.Ok(String.$StartsWith('test string', 'str', 5), 'String.$StartsWith:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "String.prototype.$StartsWith": {
            "version": "1.0.0",
            "module": "String",
            "type": "function",
            "instance": true,
            "description": "Checks if string starts with the given target string",
            "tests": [
                "Test.Ok('test string'.$StartsWith('tes'), 'String.protoype.$StartsWith:1')",
                "Test.Ok('test string'.$StartsWith('str', 5), 'String.protoype.$StartsWith:2')"
            ],
            "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
        },
        "file": "V:\\packages\\org.tts.js.core-dev.git\\dist\\String.js"
    }
]